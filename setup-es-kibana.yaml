AWSTemplateFormatVersion: 2010-09-09

Description: >-
  This template creates an Elasticsearch domain and provides access to a Kibana dashboard,
  while only a username and a password is required. To accomplish this the solution creates
  an Elasticsearch domain, an Amazon Cognito User Pool and an Identity Pool.  
Parameters:
  Username:
    Description: Username of the Kibana Dashboard user
    Type: String
    AllowedPattern: ^(?=\s*\S).*$
    ConstraintDescription: ' cannot be empty'
  Password:
    Description: Password of the Kibana Dashboard user
    Type: String
    NoEcho: true
    AllowedPattern: '^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$'
    ConstraintDescription: ' must be at least 6 alpha-numeric characters and contain at least one number'
  EsDomainName: 
    Type: String
    Default: es-domain
    Description: Elasticsearch Domain Name
  UserPoolName: 
    Type: String
    Default: DataVisualizationUserPool
    Description: User Pool Name
  IdentityPoolName: 
    Type: String
    Default: DataVisualizationIdentityPool
    Description: Identity Pool Name
  SetupLambdaName: 
    Type: String
    Default: DataVisualizationSetupLambda
    Description: Setup Lambda Name

  
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Cognito User for Data Visualization (Kibana)
        Parameters:
          - Username
          - Password
          - UserPoolName
          - IdentityPoolName
          - EsDomainName

Resources:

  trumpBotWorkshop:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      CodeUri: ./workshop-trumpbot-index-to-es
      Policies:
      - AmazonS3FullAccess
        #Events:
        #  MyTimeApi:
        #    Type: S3
        #    Properties:
        #      Bucket: !Ref InputBucket
        #      Events: s3:ObjectCreated:*
      Timeout: 60
      AutoPublishAlias: live

  ElasticsearchDomain: 
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: !Sub ${EsDomainName}-${AWS::AccountId}
      ElasticsearchClusterConfig: 
        InstanceCount: 1
        InstanceType: m3.medium.elasticsearch
      EBSOptions: 
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      ElasticsearchVersion: 6.2
      AccessPolicies: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: es:*
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${EsDomainName}-${AWS::AccountId}/*
          - 
            Effect: Allow
            Principal: 
              AWS: !GetAtt CognitoUnauthenticatedUserRole.Arn
            Action: es:*
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${EsDomainName}-${AWS::AccountId}/*


  CognitoSetupLambdaFunc:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: lambdas-eu-west-1
        S3Key: data_visualization_setup.zip
      Description: >-
        Creates a Cognito User Pool, an Identity Pool, and a User and configures Elasticsearch.
      FunctionName: !Ref SetupLambdaName
      Handler: lambda_function.lambda_handler
      Role: !GetAtt 
        - CognitoSetupLambdaRole
        - Arn
      Runtime: python2.7
      Timeout: 120

  CognitoSetupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'es:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssm:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'cognito-idp:AdminConfirmSignUp'
                  - 'cognito-idp:CreateUserPoolClient'
                  - 'cognito-idp:AdminCreateUser'
                  - 'cognito-idp:CreateUserPoolDomain'
                Resource:
                  - 'arn:aws:cognito-idp:*:*:userpool/*'
              - Effect: Allow
                Action:
                  - 'cognito-idp:CreateUserPool'
                  - 'cognito-idp:DeleteUserPoolDomain'
                  - 'cognito-idp:DeleteUserPool'
                  - 'cognito-identity:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:UpdateAssumeRolePolicy'
                  - 'iam:PassRole'
                Resource:
                  - !GetAtt 
                    - CognitoAuthenticatedUserRole
                    - Arn
                  - !GetAtt 
                    - CognitoUnauthenticatedUserRole
                    - Arn

  
  CognitoSetupLambdaCustom:
    Type: 'Custom::CognitoSetupLambdaFunc'
    DependsOn: ElasticsearchDomain
    Properties:
      ServiceToken: !GetAtt 
        - CognitoSetupLambdaFunc
        - Arn
      Region: !Ref AWS::Region
      AccountId: !Ref AWS::AccountId
      EsDomainName: !Sub ${EsDomainName}-${AWS::AccountId}
      Username: !Ref Username
      Password: !Ref Password
      UserPoolName: !Ref UserPoolName
      IdentityPoolName: !Ref IdentityPoolName
      AuthRoleName: !Ref CognitoAuthenticatedUserRole
      AuthRoleArn: !GetAtt 
        - CognitoAuthenticatedUserRole
        - Arn
      CognitoUnauthenticatedUserRole: !Ref CognitoUnauthenticatedUserRole
      CognitoUnauthenticatedUserRoleArn: !GetAtt 
        - CognitoUnauthenticatedUserRole
        - Arn

  CognitoAuthenticatedUserRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'es:*'
                Resource: '*'

  CognitoUnauthenticatedUserRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - es.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/service-role/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cognito-idp:DescribeUserPool'
                  - 'cognito-idp:CreateUserPoolClient'
                  - 'cognito-idp:DeleteUserPoolClient'
                  - 'cognito-idp:DescribeUserPoolClient'
                  - 'cognito-idp:AdminInitiateAuth'
                  - 'cognito-idp:AdminUserGlobalSignOut'
                  - 'cognito-idp:ListUserPoolClients'
                  - 'cognito-identity:DescribeIdentityPool'
                  - 'cognito-identity:UpdateIdentityPool'
                  - 'cognito-identity:SetIdentityPoolRoles'
                  - 'cognito-identity:GetIdentityPoolRoles'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'

